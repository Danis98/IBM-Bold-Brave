<!DOCTYPE HTML>
<html>
  <head>
    <title>
      <%=title%>
    </title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.0/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="/stylesheets/style.css">

  </head>
  <body>
    <!-- Fixed navbar -->
    <%- include('navbar', {title: title}) %>
    <!-- End of navbar -->

	<!-- PROFILE -->
    <div class="container">
		<div class="row">
			<div class="col-sm-4" id="DIV1">

				<div class="card hovercard">
					<div class="cardheader">

					</div>
					<div class="avatar">
						<img alt="" src="http://www.losangelesstaffingagencies.com/wp-content/uploads/2016/04/confident_Employee.jpg">
					</div>
					<div class="info">
						<div class="title">
							Name Surname
						</div>
						<div class="desc">Position: 23</div>
						<div class="desc">Points: 100</div>
					</div>

				</div>

			</div>
			<div class="col-sm-8">
					 <svg id="svg1" width="768" height="400"></svg>
						<script src="https://d3js.org/d3.v3.min.js"></script>
            <script src="https://d3js.org/d3.v4.min.js"></script>
						<script>

						var svg = d3.select("#svg1"),
							margin = {top: 20, right: 20, bottom: 30, left: 50},
							width = +svg.attr("width") - margin.left - margin.right,
							height = +svg.attr("height") - margin.top - margin.bottom,
							g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

						var parseTime = d3.timeParse("%d-%b-%y");

						var x = d3.scaleTime()
							.rangeRound([0, width]);

						var y = d3.scaleLinear()
							.rangeRound([height, 0]);

						var line = d3.line()
							.x(function(d) { return x(d.date); })
							.y(function(d) { return y(d.close); });

						d3.tsv("/data.tsv", function(d) {
						  d.date = parseTime(d.date);
						  d.close = +d.close;
						  return d;
						}, function(error, data) {
						  if (error) throw error;

						  x.domain(d3.extent(data, function(d) { return d.date; }));
						  y.domain(d3.extent(data, function(d) { return d.close; }));

						  g.append("g")
							  .attr("transform", "translate(0," + height + ")")
							  .call(d3.axisBottom(x))
							.attr("stroke-width", 3);

						  g.append("g")
							  .call(d3.axisLeft(y))
							.attr("stroke-width", 3)
							.append("text")
							  .attr("fill", "#000")
							  .attr("transform", "rotate(-90)")
							  .attr("y", 3)
							  .attr("dy", "1.71em")
							  .attr("text-anchor", "end")
							  .text("BRAVETY");

						  g.append("path")
							  .datum(data)
							  .attr("fill", "none")
							  .attr("stroke", "steelblue")
							  .attr("stroke-linejoin", "round")
							  .attr("stroke-linecap", "round")
							  .attr("stroke-width", 6.5)
							  .attr("d", line);
						});

						</script>

			</div>
		</div>
	    <div class="row">
				<div class="col-sm-12" id="DIV2">
					<style>
						#DIV2 {
						  text-align: center;
						}
					</style>
					<script src="https://d3js.org/d3.v3.min.js"></script>
					<script>

					// Define the data as a two-dimensional array of numbers. If you had other
					// data to associate with each number, replace each number with an object, e.g.,
					// `{key: "value"}`.
					var data = [
					  [90, 10], //completate, da completare
					  [70, 30], //completate, da completare
					  [100, 0], //completate, da completare
					  [10, 90], //completate, da completare
					  [0, 100] //completate, da completare
					];

					// Define the margin, radius, and color scale. The color scale will be
					// assigned by index, but if you define your data using objects, you could pass
					// in a named field from the data object instead, such as `d.name`. Colors
					// are assigned lazily, so if you want deterministic behavior, define a domain
					// for the color scale.
					var m = 10,
						r = 100,
						z = d3.scale.category20c();

					// Insert an svg element (with margin) for each row in our dataset. A child g
					// element translates the origin to the pie center.
					var svg = d3.select("#DIV2").selectAll("svg")
						.data(data)
					  .enter().append("svg")
						.attr("width", (r + m) * 2)
						.attr("height", (r + m) * 2)
					  .append("g")
						.attr("transform", "translate(" + (r + m) + "," + (r + m) + ")");

					// The data for each svg element is a row of numbers (an array). We pass that to
					// d3.layout.pie to compute the angles for each arc. These start and end angles
					// are passed to d3.svg.arc to draw arcs! Note that the arc radius is specified
					// on the arc, not the layout.
					svg.selectAll("path")
						.data(d3.layout.pie())
					  .enter().append("path")
						.attr("d", d3.svg.arc()
							.innerRadius(r / 2)
							.outerRadius(r))
						.style("fill", function(d, i) { return z(i); });

					</script>
				</div>
		</div>
	</div>
	 <!-- END PROFILE -->


  </body>
</html>
